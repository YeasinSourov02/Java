//tIGHT COUPLING
class Engine {
    void start() {
        System.out.println("Engine started.");
    }
}

class Car {
    Engine engine = new Engine();  // Direct dependency (tight coupling)

    void startCar() {
        engine.start();  // If Engine changes, Car is affected.
        System.out.println("Car is running.");
    }
}

public class Main {
    public static void main(String[] args) {
        Car myCar = new Car();
        myCar.startCar();
    }
}

//LOSE COUPLING

interface Engine {
    void start();
}

class PetrolEngine implements Engine {
    public void start() {
        System.out.println("Petrol Engine started.");
    }
}

class ElectricEngine implements Engine {
    public void start() {
        System.out.println("Electric Engine started.");
    }
}

class Car {
    private Engine engine;  // No direct dependency (loose coupling)

    public Car(Engine engine) {  // Injecting dependency (constructor)
        this.engine = engine;
    }

    void startCar() {
        engine.start();
        System.out.println("Car is running.");
    }
}

public class Main {
    public static void main(String[] args) {
        Car petrolCar = new Car(new PetrolEngine());  // Petrol Engine Car
        petrolCar.startCar();

        Car electricCar = new Car(new ElectricEngine());  // Electric Engine Car
        electricCar.startCar();
    }
}

